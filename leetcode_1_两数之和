# python3 方法 （另还有更快的java和c++方法，详见https://blog.csdn.net/ssswill/article/details/84824667）

# 方法一
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        #直接在i一个一个循环的时候，直接判断target-nums[i]在列表里吗，在的话用list.index()获取索引，用了一次for循环。很棒。
        for i in range(len(nums)):
            if target-nums[i] in nums:
                return i,nums.index(target-nums[i])
# 方法一执行用时 3312 ms

# 方法二
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)):
            if target-nums[i] in nums:
            #增加了返回的两个数下表不能相同的判断
                if i!=nums.index(target-nums[i]):
                    return i,nums.index(target-nums[i])

# 方法二执行用时 552 ms

# 方法三
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        #遍历一个i,就把nums[i]放在字典里。之后i不断相加，总会碰到
        #target - nums[i]在字典里的情况。碰到的时候return即可。这里注意到先return的是dict[a],再是当前的i,原因就是dict里存的value都是以前遍历过的i,所以它比当前的i小，按从小到大的顺序所以这样排。
        dict = {}
        for i in range(len(nums)):
            a = target - nums[i]
            if a in dict:
                return dict[a],i
            else:
                dict[nums[i]] = i
# 方法三执行用时32 ms

